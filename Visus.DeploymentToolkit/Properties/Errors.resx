<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EmptySequenceStore" xml:space="preserve">
    <value>The configured task sequence store is empty.</value>
  </data>
  <data name="HalNotFound" xml:space="preserve">
    <value>The system could not determine the type of the HAL.</value>
  </data>
  <data name="NoRegistryHive" xml:space="preserve">
    <value>"{0}" does not designate or does not begin with a valid registry hive.</value>
  </data>
  <data name="NoVdsServiceLoader" xml:space="preserve">
    <value>The service loader for the Virtual Disk Services does not implement the expected interface.</value>
  </data>
  <data name="OpenRegistryFailed" xml:space="preserve">
    <value>Failed to open the registry path "{0}".</value>
  </data>
  <data name="PhaseAlreadySet" xml:space="preserve">
    <value>The phase has already been set to {0}.</value>
  </data>
  <data name="SequenceNotInStore" xml:space="preserve">
    <value>The specified task sequence "{0}" has not been found in the task sequence store.</value>
  </data>
  <data name="TsStoreNotFound" xml:space="preserve">
    <value>The task sequence store at "{0}" could not be found.</value>
  </data>
  <data name="WaitVdsFailed" xml:space="preserve">
    <value>Failed waiting for Virtual Disk Service to become ready.</value>
  </data>
  <data name="InvalidWindowsPeDirectory" xml:space="preserve">
    <value>The directory holding Windows PE is invalid.</value>
  </data>
  <data name="InvalidIsoOutput" xml:space="preserve">
    <value>The output location for the ISO to create is invalid.</value>
  </data>
  <data name="UnexpectedPhase" xml:space="preserve">
    <value>The specified task sequence is for phase {0}, but a task sequence for phase {1} was expected.</value>
  </data>
  <data name="InvalidMountPoint" xml:space="preserve">
    <value>"{0}" is not a valid mount point.</value>
  </data>
  <data name="InvalidImage" xml:space="preserve">
    <value>"{0}" is not a valid image.</value>
  </data>
  <data name="ImageAlreadyMounted" xml:space="preserve">
    <value>There can only be one WIM image mounted at a time. Unmount "{0}" to mount a new one.</value>
  </data>
  <data name="InvalidDeploymentShare" xml:space="preserve">
    <value>A valid location for the deployment share is required.</value>
  </data>
  <data name="DeploymentShareAlreadyExists" xml:space="preserve">
    <value>A file already exists at the desired location "{0}" for the deployment share.</value>
  </data>
  <data name="DeploymentShareNotEmpty" xml:space="preserve">
    <value>The desired location "{0}" for the deployment share is not empty.</value>
  </data>
  <data name="InvalidHiveMountPoint" xml:space="preserve">
    <value>The path "{0}" does not designate a valid mount point for a registry hive.</value>
  </data>
  <data name="MissingRegistryKey" xml:space="preserve">
    <value>The registry key "{0}" does not exist.</value>
  </data>
  <data name="MissingWimMount" xml:space="preserve">
    <value>A mounted WIM image was expected to be stored in "{0}", but was not found.</value>
  </data>
  <data name="CannotDeleteDefaultValue" xml:space="preserve">
    <value>The default value of a registry cannot be deleted.</value>
  </data>
  <data name="MissingRegistryValue" xml:space="preserve">
    <value>A value registry value must be provided unless the value is to be deleted.</value>
  </data>
  <data name="NotAdministrator" xml:space="preserve">
    <value>The task sequence requires elevation, but the process is not running as administrator.</value>
  </data>
</root>