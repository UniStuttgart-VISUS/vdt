// <copyright file="RegistryBcdStore.cs" company="Visualisierungsinstitut der Universität Stuttgart">
// Copyright © 2025 Visualisierungsinstitut der Universität Stuttgart.
// Licensed under the MIT licence. See LICENCE file for details.
// </copyright>
// <author>Christoph Müller</author>

using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.Versioning;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using Visus.DeploymentToolkit.Bcd.Properties;


namespace Visus.DeploymentToolkit.Bcd {

    /// <summary>
    /// An implementation of the <see cref="IBcdStore"/> which uses the fact
    /// that a BCD store is a registry hive that can be mounted into the
    /// active registry.
    /// </summary>
    [SupportedOSPlatform("windows")]
    public sealed partial class RegistryBcdStore : IBcdStore, IDisposable {

        #region Factory methods
        /// <summary>
        /// Creates a new BCD store and opens it.
        /// </summary>
        /// <remarks>
        /// <para>This code must to run with administrative privileges. The
        /// process must have &quot;SeBackupPrivilege&quot; and
        /// &quot;SeRestorePrivilege&quot;. Callers can achieve this by holding
        /// a <see cref="Visus.DeploymentToolkit.Security.TokenPrivilege"/>
        /// object for each privilege.</para>
        /// </remarks>
        /// <param name="path">The location where the BCD store should be
        /// created.</param>
        /// <param name="hive">The registry hive where the store is mounted,
        /// which defaults to <see cref="RegistryHive.LocalMachine"/>.</param>
        /// <param name="key">The name of the key where the store is to be
        /// mounted. If this is <see langword="null"/>, a random name will be
        /// generated by the constructor.</param>
        /// <returns></returns>
        public static RegistryBcdStore Create(string path,
                RegistryHive hive = RegistryHive.LocalMachine,
                string? key = null) {
            _ = WmiBcdStore.Create(path);
            return new(path, hive, key);
        }
        #endregion

        #region Public constructors
        /// <summary>
        /// Opens the BCD store at <paramref name="path"/> and mounts it to the
        /// specified <paramref name="key"/> in <paramref name="hive"/>.
        /// </summary>
        /// <remarks>
        /// <para>This constructor requires the code to run with administrative
        /// privileges. The process must have &quot;SeBackupPrivilege&quot; and
        /// &quot;SeRestorePrivilege&quot;. Callers can achieve this by holding
        /// a <see cref="Visus.DeploymentToolkit.Security.TokenPrivilege"/>
        /// object for each privilege.</para>
        /// </remarks>
        /// <param name="path">The path to the BCD store hive to be opened.
        /// </param>
        /// <param name="hive">The registry hive where the store is mounted,
        /// which defaults to <see cref="RegistryHive.LocalMachine"/>.</param>
        /// <param name="key">The name of the key where the store is to be
        /// mounted. If this is <see langword="null"/>, a random name will be
        /// generated by the constructor.</param>
        public RegistryBcdStore(string path,
                RegistryHive hive = RegistryHive.LocalMachine,
                string? key = null) {
            if (key == null) {
                key = "_bcd_" + RandomNumberGenerator.GetHexString(64, true);
            }

            this._hive = new(hive, key, path);
            this._store = this._hive!;
            CheckStructure(this._store, nameof(path));
            this.UpdateDescription();
        }

        /// <summary>
        /// Initialises a new instance.
        /// </summary>
        /// <param name="key">The registry key representing the BCD store. The
        /// object will take ownership of this key and dispose it when it is
        /// disposed.</param>
        public RegistryBcdStore(RegistryKey key) {
            CheckStructure(this._store = key, nameof(key));
            this.UpdateDescription();
        }

        /// <summary>
        /// Initialises a new instance.
        /// </summary>
        /// <remarks>
        /// This constructor searches the registry for a BCD store that has the
        /// &quot;System&quot; flag set in its description.
        /// </remarks>
        /// <exception cref="InvalidOperationException">If no BCD store
        /// strucuture could be found that was marked as the system store.
        /// </exception>
        public RegistryBcdStore() {
            foreach (var s in Registry.LocalMachine.GetSubKeyNames()) {
                if (GetBcdKeyName().IsMatch(s)) {
                    using var key = Registry.LocalMachine.OpenSubKey(
                        Path.Combine(s, "Description"));
                    if (key is not null) {
                        if ((int) key.GetValue("System", 0) != 0) {
                            this._store = Registry.LocalMachine.OpenSubKey(s)!;
                            break;
                        }
                    }
                } /* if (GetBcdKeyName().IsMatch(s)) */
            } /* foreach (var s in Registry.LocalMachine.GetSubKeyNames()) */

            if (this._store is null) {
                throw new InvalidOperationException(Errors.NoBcdStoreFound);
            }

            this.UpdateDescription();
        }
        #endregion

        #region Public properties
        /// <inheritdoc />
        public string? KeyName { get; private set; }

        /// <inheritdoc />
        public bool IsSystem { get; private set; }

        /// <inheritdoc />
        public bool TreatAsSystem { get; private set; }
        #endregion

        #region Finaliser
        /// <summary>
        /// Finalises the instance.
        /// </summary>
        ~RegistryBcdStore() => this.Dispose(false);
        #endregion

        #region Public methods
        /// <inheritdoc />
        public void Dispose() {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <inheritdoc />
        public IEnumerator<BcdObject> GetEnumerator() {
            ObjectDisposedException.ThrowIf(this._store is null, this);

            using var objects = this._store.OpenSubKey("Objects");
            Debug.Assert(objects is not null);

            foreach (var s in objects.GetSubKeyNames()) {
                using var o = objects.OpenSubKey(s);
                if (o is null) {
                    throw new InvalidOperationException(
                    Errors.InvalidRegistryKey);
                }

                yield return new(o);
            }
        }

        /// <inheritdoc />
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();
        #endregion

        #region Private methods
        /// <summary>
        /// Checks the basic structure we expect for a BCD store.
        /// </summary>
        /// <param name="key"></param>
        /// <param name="parameterName"></param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        private static void CheckStructure(RegistryKey key,
                string parameterName) {
            if (key is null) {
                throw new ArgumentNullException(parameterName);
            }

            using var desc = key.OpenSubKey("Description");
            if (desc is null) {
                throw new ArgumentException(Errors.InvalidRegistryKey,
                    parameterName);
            }

            using var objects = key.OpenSubKey("Objects");
            if (objects is null) {
                throw new ArgumentException(Errors.InvalidRegistryKey,
                    parameterName);
            }
        }

        /// <summary>
        /// Generates a regular expression that matches the typical names of
        /// the BCD stores in the registry.
        /// </summary>
        /// <returns></returns>
        [GeneratedRegex(@"BCD\d+$", RegexOptions.IgnoreCase)]
        private static partial Regex GetBcdKeyName();

        /// <summary>
        /// Disposes all resources we hold, most importantly the mounted
        /// registry hive.
        /// </summary>
        /// <param name="disposing"></param>
        private void Dispose(bool disposing) {
            if (this._store is not null) {
                if (disposing) {
                    this._store.Dispose();
                    this._hive?.Dispose();
                }

                this._hive = null;
                this._store = null!;
            }
        }

        /// <summary>
        /// Updates the description properties of the store from the registry.
        /// </summary>
        private void UpdateDescription() {
            ObjectDisposedException.ThrowIf(this._store is null, this);
            using var desc = this._store.OpenSubKey("Description");
            Debug.Assert(desc is not null);

            {
                var value = desc.GetValue("KeyName", null);
                this.KeyName = value as string;
            }

            {
                var value = desc.GetValue("System", 0);
                this.IsSystem = (value is int v) && (v != 0);
            }

            {
                var value = desc.GetValue("TreatAsSystem", 0);
                this.TreatAsSystem = (value is int v) && (v != 0);
            }
        }
        #endregion

        #region Private fields
        private MountedHive? _hive;
        private RegistryKey _store;
        #endregion
    }
}
